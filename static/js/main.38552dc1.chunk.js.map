{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","title","id","completed","classNames","TodoList","todos","map","username","userId","getMaxId","todosOfId","Math","max","App","todoList","useState","todosFromServer","setTodos","inputValue","setInputValue","hasTitle","setHasTitle","setUserId","isUserOption","setUserOption","action","method","onSubmit","event","preventDefault","length","currentTodo","newTodo","Boolean","htmlFor","type","placeholder","value","onChange","target","disabled","usersFromServer","person","findUser","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38552dc1.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    id,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\ntype Todo = {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n};\n\nconst getMaxId = (todos: Todo[]): number => {\n  const todosOfId = todos.map(todo => todo.id);\n\n  return Math.max(...todosOfId);\n};\n\nconst getAddUser = (todoList: Todo[]) => {\n  return todoList.map(todo => {\n    const findUser = usersFromServer.find(user => user.id === todo.userId);\n\n    return { ...todo, user: findUser };\n  });\n};\n\nexport const App = () => {\n  const [todos, setTodos] = useState([...todosFromServer]);\n  const [inputValue, setInputValue] = useState('');\n  const [hasTitle, setHasTitle] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [isUserOption, setUserOption] = useState(false);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n\n    if (event.target.value) {\n      setHasTitle(true);\n    }\n  };\n\n  const handleSelectionChange = (event: React.ChangeEvent<HTMLSelectElement>) => { //eslint-disable-line\n    setUserId(+event.target.value);\n\n    if (event.target.value) {\n      setUserOption(true);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!inputValue.length || !userId) {\n      setHasTitle(Boolean(inputValue.length));\n      setUserOption(Boolean(userId));\n    } else {\n      setTodos((currentTodo) => {\n        const newTodo = {\n          id: getMaxId(currentTodo) + 1,\n          title: inputValue,\n          completed: false,\n          userId,\n        };\n\n        return [...currentTodo, newTodo];\n      });\n    }\n\n    setInputValue('');\n    setUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"user-input\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"user-input\"\n            placeholder=\"Enter a title\"\n            value={inputValue}\n            onChange={handleInputChange}\n          />\n          {!hasTitle && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user-option\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user-option\"\n            value={userId}\n            onChange={handleSelectionChange}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n            {usersFromServer.map((person) => {\n              const { id, name } = person;\n\n              return (\n                <option\n                  key={id}\n                  value={id}\n                >\n                  {name}\n                </option>\n              );\n            })}\n          </select>\n\n          {!isUserOption && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={getAddUser(todos)} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}